// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.core;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.SlewRateLimiter;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.controls.OI;
import frc.robot.subsystems.climber.ClimberBase;
import frc.robot.subsystems.drivetrain.*;
import frc.robot.subsystems.shooter.*;
import frc.robot.subsystems.intake.*;
import frc.robot.subsystems.colorwheel.*;



/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
   
    
   
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static Shooter shooter;
    public static ClimberBase climber;
 
    ColorSensor cSensor;
    private SlewRateLimiter m_xspeedLimiter = new SlewRateLimiter(3);
    private SlewRateLimiter m_yspeedLimiter = new SlewRateLimiter(3);
    private SlewRateLimiter m_rotLimiter = new SlewRateLimiter(3);
    Timer wheelTimer;
    double xSpeed;
    double ySpeed;
    double rot;
    int numDebugger;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        SmartDashboard.putString("Target Color", "blue");
       
        
        numDebugger = 0;
        driveTrain = new DriveTrain();
        intake = new Intake();
        shooter = new Shooter();
        climber = new ClimberBase();
        // cSensor = new ColorSensor();
      
        oi = new OI();
        wheelTimer = new Timer();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        xSpeed = 0.0;
        ySpeed = 0.0;

        rot = 0.0;
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }
   

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {

    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
    }

    @Override
    public void teleopInit() {
        wheelTimer.reset();
        wheelTimer.start();
    }
        
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
      

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        xSpeed = m_xspeedLimiter.calculate(-oi.getLeftJoystickX());
        ySpeed = m_yspeedLimiter.calculate(-oi.getLeftJoystickY());
        rot = m_rotLimiter.calculate(oi.getRightJoystickX());
        String targetColor = SmartDashboard.getString("Target Color", "blue");
        Scheduler.getInstance().run();
        
        // driveTrain.runPeriodic(-xSpeed, ySpeed, rot);
        
        // if (Math.abs(oi.getLeftTrigger()) > 0){
        //     intake.runIntake(0.4, false);
        // } else if (Math.abs(oi.getRightTrigger()) > 0){
        //     intake.runIntake(-0.4, false);
        // } else {
        //     intake.runIntake(0, false);
        // }
        if(oi.getAButton()){
            if(!targetColor.equalsIgnoreCase(cSensor.detectColor())){
                intake.runIntake(0.225, false);
            } else {
                
              
               
                if(wheelTimer.get() < 0.125){
                    intake.runIntake(-0.8, false);
                   
                } else {
                    intake.runIntake(0, false);
                    wheelTimer.reset();
                    System.out.println("Stopped");
                }
               
            }

        } else {
            intake.runIntake(0, false);
            wheelTimer.reset();
        }
        // if(oi.getBButton()){
        //     intake.runIntake(0.4, false);
        // } else {
        //     intake.runIntake(0, false);
        // }
     
        
       
    }
    @Override
    public void testPeriodic() {
        /* 
      ====Single Motor Tests=== 
    ~ Xbox Controller -> Motors ~ 
        Button A = Right Rear
        Button B = Right Front
        Button Y = Left Rear
        Button X = Left Front 
        */
        // if (oi.getAButton()){
        //     driveTrain.runRightRear(1);
        // } else {
        //     driveTrain.runRightRear(0);
        // }
        // if (oi.getBButton()){
        //     driveTrain.runrightFront(1);
        //  } else {
        //      driveTrain.runrightFront(0);
        //  }
         
        // if (oi.getYButton()){
        //     driveTrain.runLeftFront(1);
        // } else {
        //     driveTrain.runLeftFront(0);
        // }
        // if (oi.getXButton()){
        //     driveTrain.runLeftRear(1);
        // } else {
        //     driveTrain.runLeftRear(0);
        // }
        
    }
   
}

